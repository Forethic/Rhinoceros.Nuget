root=true

# Use UNIX line endings for .sh fils so we play nice cross platform
[*.sh]
end_of_line = lf

[*.cs]
indent_style = space
indent_size = 4
# 
# NOTE: 
#
# https://docs.microsoft.com/en-us/visualstudio/ide/editorconfig-code-style-settings-reference
# 
# Good resource for most values
# https://github.com/dotnet/roslyn/blob/master/.editorconfig 
#

# IDE0055: Fix formatting
dotnet_diagnostic.IDE0055.severity = error

# Sort using and Import directives with System.* appearing first
dotnet_sort_system_directives_first = true
dotnet_separate_import_directives_groups = false

# Avoid "this." for methods, fields, events and properties
dotnet_style_qualification_for_field = false
dotnet_style_qualification_for_method = false
dotnet_style_qualification_for_property = false
dotnet_style_qualification_for_event = false

# Use language keywords instead of framework type names for type references (such as int not Int32)
dotnet_style_predefined_type_for_locals_parameters_members = true
dotnet_style_predefined_type_for_member_access = true

# Prefer "var" everywhere
csharp_style_var_for_built_in_types = true
csharp_style_var_when_type_is_apparent = true
csharp_style_var_elsewhere = true

# Prefer method-like constructs to have a block body (using {})
# csharp_style_expression_bodied_methods = false:error
# csharp_style_expression_bodied_constructors = false:error
# csharp_style_expression_bodied_operators = false:error

# Prefer property-like constructs to have an expression-body (properties using => instead of {})
csharp_style_expression_bodied_properties = true:error
csharp_style_expression_bodied_indexers = true:error
csharp_style_expression_bodied_accessors = true:error

# Force objects to initialize their members inside {} on construction
dotnet_style_object_initializer = true:error
dotnet_style_collection_initializer = true:error

# Force pattern matching over cast checking
#               if (o is int i)
#   instead of: if (o is int) { var i = (int)o; }
csharp_style_pattern_matching_over_is_with_cast_check = true:error

# Force pattern matching over null checking
#                if (o is string s)
#    instead of: var s = (string)o; if (s != null) {}
csharp_style_pattern_matching_over_as_with_null_check = true:error

# Force using tuple names never the Item1, Item2 etc...
dotnet_style_explicit_tuple_names = true:error

# Force inline variable declaration
#             SomeCall(out onError e)
# instead of: int e; SomeCall(out e);
csharp_style_inlined_variable_declaration = true:error

# Force use of ?? for throwing on null checks
#             var b = a ?? throw();
# instead of: if (a == null) { throw(); } b = a;
csharp_style_throw_expression = true:error

# Force calling delegates with null check
#             func?.Invoke()
# instead of: if (func != null) func();
csharp_style_conditional_delegate_call = true:error

# Force expression coalescing 
#             var a = x ?? y;
# instead of: var a = x == null ? y : x;
dotnet_style_coalesce_expression = true:error

# Force null propagation
#             var s = o?.ToString()
# instead of: var s = o == null ? null : o.ToString()
dotnet_style_null_propagation = true:error

#
# NAMING CONVENTIONS
# https://github.com/dotnet/roslyn/pull/15065
#
#   NOTE: Order of priority works here, so to exclude private static members
#         from the m-prefix style place it before the prefix rule
#

# Constants are All_Upper
dotnet_naming_rule.constants_must_be_all_upper.severity = error
dotnet_naming_rule.constants_must_be_all_upper.symbols = constants
dotnet_naming_rule.constants_must_be_all_upper.style = constants_style

dotnet_naming_symbols.constants.applicable_kinds = field, local
dotnet_naming_symbols.constants.required_modifiers = const

dotnet_naming_style.constants_style.capitalization = all_upper

# Instance fields are camelCase and start with _
dotnet_naming_rule.instance_fields_must_be_pascal_case.severity = error
dotnet_naming_rule.instance_fields_must_be_pascal_case.symbols = instance_fields
dotnet_naming_rule.instance_fields_must_be_pascal_case.style = instance_field_style

dotnet_naming_symbols.instance_fields.applicable_kinds = field
dotnet_naming_symbols.Instance_fields.applicable_accessibilities = private

dotnet_naming_style.instance_field_style.capitalization = pascal_case
dotnet_naming_style.instance_field_style.required_prefix = _

# Locals and parameters are calmelCase
dotnet_naming_rule.locals_and_parameters_must_be_camel_case.severity = error
dotnet_naming_rule.locals_and_parameters_must_be_camel_case.symbols = locals_and_parameters
dotnet_naming_rule.locals_and_parameters_must_be_camel_case.style = locals_and_parameters_style

dotnet_naming_symbols.locals_and_parameters.applicable_kinds = parameter, local

dotnet_naming_style.locals_and_parameters_style.capitalization = camel_case

# Local functions are PascalCase
dotnet_naming_rule.local_functions_must_be_pascal_case.severity = error
dotnet_naming_rule.local_functions_must_be_pascal_case.symbols = local_functions
dotnet_naming_rule.local_functions_must_be_pascal_case.style = local_functions_style

dotnet_naming_symbols.local_functions.applicable_kinds = local_functiuon

dotnet_naming_style.local_functions_style.capitalization = pascal_case

# By default, name items with PascalCase
dotnet_naming_rule.members_must_be_pascal_case.severity = error
dotnet_naming_rule.members_must_be_pascal_case.symbols = all_members
dotnet_naming_rule.members_must_be_pascal_case.style = all_members_style

dotnet_naming_rule.all_members.applicable_kinds = *

dotnet_naming_style.all_members_style.capitalization = pascal_case

# Async methods end with Async
dotnet_naming_rule.async_methods_must_end_with_async.severity = error
dotnet_naming_rule.async_methods_must_end_with_async.symbols  = async_methods_must_end_with_async_symbols
dotnet_naming_rule.async_methods_must_end_with_async.style    = async_methods_must_end_with_async_style

dotnet_naming_symbols.async_methods_must_end_with_async_symbols.applicable_kinds   = method
dotnet_naming_symbols.async_methods_must_end_with_async_symbols.required_modifiers = async

dotnet_naming_style.async_methods_must_end_with_async_style.capitalization  = pascal_case
dotnet_naming_style.async_methods_must_end_with_async_style.required_suffix = Async